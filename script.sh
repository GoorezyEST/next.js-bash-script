#!/usr/bin/bash

#Arguments validations

if [ $# -lt 1 ]; then
    echo "❌ Error: You must enter your application name."
    exit 10
fi

if [ $# -gt 1 ]; then
    echo "❌ Error: You can only write one argument."
    exit 11
fi

#Variables declarations

app_name=$1

app_path="./$app_name"

app_language=""

app_styles=""

page_content_css='import styles from "@/styles/modules/home.module.css";

export default function Home() {
  return <h1>My app</h1>;
}
'

page_content_tailwind='export default function Home() {
  return <h1>My app</h1>;
}'

layout_content_js_css='import { Inter } from "next/font/google";
import "@/styles/globals.css";

const fontFamily = Inter({ subsets: ["latin"] });

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body className={fontFamily.className}>{children}</body>
    </html>
  );
}'

layout_content_ts_css='import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "@/styles/globals.css";

const fontFamily = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={fontFamily.className}>{children}</body>
    </html>
  );
}
'

layout_content_js_tailwind='import { Inter } from "next/font/google";
import "./globals.css";

const fontFamily = Inter({ subsets: ["latin"] });

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body className={fontFamily.className}>{children}</body>
    </html>
  );
}
'

layout_content_ts_tailwind='import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";

const fontFamily = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={fontFamily.className}>{children}</body>
    </html>
  );
}
'

style_css_base='* {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}'

#Functions declarations

removeOnError() {
    rm -f "$app_path"
}

#Ask user for language preference

echo -e -n "Which language do you prefer?\n1. JavaScript / 2. TypeScript [1/2]: "

read language_response

if [ $language_response != 1 -a $language_response != 2 ]; then
   echo "❌ Error: You have to pick between 1 (JS) or 2 (TS)."
   exit 12
fi

if [ $language_response == 1 ]; then
  echo -e "\n✅ You selected JavaScript\n"
  app_language="--js"
fi

if [ $language_response == 2 ]; then
  echo -e "\n✅ You selected TypeScript\n"
  app_language="--ts"
fi

#Ask user for styles preference

echo -e -n "Do you want to add Tailwind?\n1. Yes / 2. No [1/2]: "

read styles_response

if [ $styles_response != 1 -a $styles_response != 2 ]; then
   echo "❌ Error: You have to pick between 1 (YES) or 2 (NO)."
   exit 12
fi

if [ $styles_response == 1 ]; then
  echo -e "\n✅ Tailwind will be included\n"
  app_styles="--tailwind"
fi

if [ $styles_response == 2 ]; then
  echo -e "\n✅ Tailwind will not be included\n"
  app_styles="--no-tailwind"
fi

#Script main code

echo -e "Starting npx create-next-app@latest\n"

npx create-next-app@latest $app_name $app_language --eslint $app_styles --app --no-src-dir --import-alias '@/*'

if [ $? -ne 0 ]; then 
    echo "\n❌ Error: Make sure you have Node.js and NPM installed."
    exit 13
fi

echo -e "✅ Application created\n"

echo -e "Starting cleanup\n"

if [ ! -d "$app_path/public" ]; then
    removeOnError
    echo -e "❌ Script stop working\nError 13: The public folder doesn't exist."
    exit 14
fi

rm -f $app_path/public/*

echo -e "✅ Removed files inside of the public folder"

if [ ! -d "$app_path/app" ]; then
    removeOnError
    echo -e "\n❌ Script stop working\nError 13: The app folder doesn't exist."
    exit 14
fi

if [ ! -f "$app_path/app/favicon.ico" ]; then
    removeOnError
    echo -e "\n❌ Script stop working\nError 13: Some of the next files were not found: favicon.ico."
    exit 14
fi

rm -f $app_path/app/favicon.ico

echo -e "✅ Removed favicon from the app folder"

if [ $styles_response == 2 ]; then 
    rm -f $app_path/app/{globals.css, page.module.css}
    mkdir -p $app_path/styles $app_path/styles/modules
    echo -e "$style_css_base" > $app_path/styles/globals.css 
    touch $app_path/styles/modules/home.module.css
    echo -e "✅ Created styles folder"
fi

if [ $language_response == 1 -a $styles_response == 2 ]; then
    echo -e "$page_content_css" > $app_path/app/page.js
    echo -e "✅ File page.js cleaned"
    echo -e "$layout_content_js_css" > $app_path/app/layout.js
    echo -e "✅ File layout.js cleaned"
fi

if [ $language_response == 1 -a $styles_response == 1 ]; then
    echo -e "$page_content_tailwind" > $app_path/app/page.js
    echo -e "✅ File page.js cleaned"
    echo -e "$layout_content_js_tailwind" > $app_path/app/layout.js
    echo -e "✅ File layout.js cleaned"
fi

if [ $language_response == 2  -a $styles_response == 2 ]; then
    echo -e "$page_content_css" > $app_path/app/page.tsx
    echo -e "✅ File page.tsx cleaned"
    echo -e "$layout_content_ts_css" > $app_path/app/layout.tsx
    echo -e "✅ File layout.tsx cleaned"
fi

if [ $language_response == 2  -a $styles_response == 1 ]; then
    echo -e "$page_content_tailwind" > $app_path/app/page.tsx
    echo -e "✅ File page.tsx cleaned"
    echo -e "$layout_content_ts_tailwind" > $app_path/app/layout.tsx
    echo -e "✅ File layout.tsx cleaned"
fi


echo -e "✅ Cleanup done"

echo -e "\n✨ Happy coding!"